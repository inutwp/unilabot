stages:       
  - build
  - deploy

build-job:   
  stage: build
  image: docker:latest
  services:
    - name: docker:20.10.11-dind
  before_script:
    - echo "Login Docker Registry" 
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - echo "Build Docker"
    - docker build --pull 
      --build-arg work_dir="$WORK_DIR" 
      --build-arg config_dir="$CONFIG_DIR" 
      --build-arg script_dir="$SCRIPT_DIR" 
      --build-arg src_dir="$SRC_DIR" 
      --build-arg user="$USER_IMAGE"
      --no-cache 
      -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
    - echo "Image Build Complete"

deploy-job:     
  stage: deploy
  image: alpine:3.15
  tags:
    - deployment
  before_script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk --update --no-cache add openssh-client
  script:
    - echo "Deploying application..."
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -p $SSH_PORT $SERVER_USER@$SERVER_ADDRESSP "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -p $SSH_PORT $SERVER_USER@$SERVER_ADDRESSP "docker pull $CI_REGISTRY_IMAGE"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -p $SSH_PORT $SERVER_USER@$SERVER_ADDRESSP "docker container rm -f $CONTAINER_NAME || true"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -p $SSH_PORT $SERVER_USER@$SERVER_ADDRESSP "docker run -d --name $CONTAINER_NAME $CI_REGISTRY_IMAGE"
    - echo "Application successfully deployed."
  environment:
    name: production
  only:
    - master
