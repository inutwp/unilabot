stages:
  - build
  - test
  - deploy

build-image:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
  before_script:
    - echo "Login Docker Registry"
    - cat "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    - echo "Success Login"
  script:
    - echo "Build Docker"
    - docker build --pull
      --build-arg work_dir="$WORK_DIR"
      --build-arg config_dir="$CONFIG_DIR"
      --build-arg script_dir="$SCRIPT_DIR"
      --build-arg src_dir="$SRC_DIR"
      --build-arg user="$USER_IMAGE"
      --no-cache
      -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
    - echo "Image Build Complete"
  after_script:
    - echo "Logout Docker Registry"
    - docker logout "$CI_REGISTRY"
    - echo "Success Logout"

test-image:
  stage: test
  image: alpine:latest
  script: 
    - echo "Run Test Image"
    - cat "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    - docker system prune -a -f || true
    - docker pull "$CI_REGISTRY_IMAGE"    
    - docker stop "$CONTAINER_NAME" || true
    - docker run 
      -d --name "$CONTAINER_NAME"
      --rm 
      -v logdata:"$LOG_DIR" 
      "$CI_REGISTRY_IMAGE"
    - echo "Test Run Image Successfully"
  only:
    - dev
    - staging

deploy-image-dev:
  stage: deploy
  image: alpine:latest
  services:
    - name: alpine:latest
  before_script:
    - echo "Deploying application..."
    - 'which ssh-agent || ( apk update && apk add --no-cache openssh )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
  script:
    - ssh 
      -o StrictHostKeyChecking=no 
      -p "$SSH_PORT" "$SERVER_USER"@"$SERVER_ADDRESS" 
      "export IMAGE_DEV="$CI_REGISTRY_IMAGE" && export WORK_DIR="$WORK_DIR" && export VOLUMES="LOG_VOLUMES" && docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS_VAR" && ls -la && cd "$APP_DIR" && bash deploy.sh up"
    - echo "Application successfully deployed."
  only:
    - dev
