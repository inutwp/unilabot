stages:
  - build
  - deploy

build-job:
  stage: build
  image: docker:latest
  services:
    - name: docker:20.10.11-dind
  before_script:
    - echo "Login Docker Registry"
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - echo "Success Login"
  script:
    - echo "Build Docker"
    - docker build --pull
      --build-arg work_dir="$WORK_DIR"
      --build-arg config_dir="$CONFIG_DIR"
      --build-arg script_dir="$SCRIPT_DIR"
      --build-arg src_dir="$SRC_DIR"
      --build-arg user="$USER_IMAGE"
      --no-cache
      -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
    - echo "Image Build Complete"
  after_script:
    - echo "Logout Docker Registry"
    - docker logout "$CI_REGISTRY"
    - echo "Success Logout"
  only:
    - main

deploy-job:
  stage: deploy
  image: alpine:latest
  services:
    - name: alpine:latest
  script:
    - echo "Deploying application..."
    - chmod og= "$SSH_PRIVATE_KEY"
    - ssh -i "$SSH_PRIVATE_KEY" -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SERVER_USER"@"$SERVER_ADDRESS" "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY""
    - ssh -i "$SSH_PRIVATE_KEY" -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SERVER_USER"@"$SERVER_ADDRESS" "docker system prune -a -f || true"
    - ssh -i "$SSH_PRIVATE_KEY" -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SERVER_USER"@"$SERVER_ADDRESS" "docker pull "$CI_REGISTRY_IMAGE""
    - ssh -i "$SSH_PRIVATE_KEY" -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SERVER_USER"@"$SERVER_ADDRESS" "docker run -d --name "$CONTAINER_NAME" -v logdata:/var/www/admin/log "$CI_REGISTRY_IMAGE""
    - echo "Application successfully deployed."
  only:
    - main
